//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer Comstance
// {
//
//   float3 centerPosition;             // Offset:    0 Size:    12
//   float size;                        // Offset:   12 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// rwbParticle                           UAV    byte         r/w             u0      1 
// resetParticle                         UAV    byte         r/w             u1      1 
// Comstance                         cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB0[1], immediateIndexed
dcl_uav_raw u0
dcl_uav_raw u1
dcl_input vThreadID.xyz
dcl_temps 6
dcl_thread_group 100, 1, 1
//
// Initial variable locations:
//   vThreadID.x <- DTid.x; vThreadID.y <- DTid.y; vThreadID.z <- DTid.z
//
#line 13 "D:\就職作品\01\gameLib(ver 1.2)\Source\Shader\absorpartion_particle_compute.hlsl"
iadd r0.x, vThreadID.y, vThreadID.z
iadd r0.x, r0.x, vThreadID.x  // r0.x <- index

#line 15
mov r0.y, l(44)
imul null, r0.x, r0.y, r0.x  // r0.x <- bufferIndex

#line 16
mov r0.y, l(0)
iadd r0.y, r0.y, r0.x
ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r1.xyzw, r0.y, u0.xyzw  // r1.x <- position.x; r1.y <- position.y; r1.z <- position.z; r1.w <- position.w

#line 20
mov r0.yzw, -r1.xxyz
add r0.yzw, r0.yyzw, cb0[0].xxyz  // r0.y <- vec.x; r0.z <- vec.y; r0.w <- vec.z

#line 21
dp3 r2.x, r0.yzwy, r0.yzwy
sqrt r2.x, r2.x  // r2.x <- leng

#line 22
dp3 r2.y, r0.yzwy, r0.yzwy
rsq r2.y, r2.y
mul r0.yzw, r0.yyzw, r2.yyyy

#line 23
itof r2.yzw, l(0, 0, 0, 1)  // r2.y <- up.z; r2.z <- up.x; r2.w <- up.y

#line 26
mul r3.xyz, r0.wyzw, r2.wyzw
mul r2.yzw, r0.zzwy, r2.yyzw
mov r2.yzw, -r2.yyzw
add r2.yzw, r2.yyzw, r3.xxyz  // r2.y <- velocity.x; r2.z <- velocity.y; r2.w <- velocity.z

#line 27
mul r2.yzw, r2.yyzw, l(0.000000, 0.010000, 0.010000, 0.010000)

#line 28
mul r0.yzw, r0.yyzw, l(0.000000, 0.030000, 0.030000, 0.030000)
add r0.yzw, r0.yyzw, r2.yyzw
add r1.xyz, r0.yzwy, r1.xyzx

#line 30
ge r0.y, r2.x, l(0.100000)
movc r0.y, r0.y, l(1.000000), l(0)
ftou r0.y, r0.y  // r0.y <- set

#line 31
mov r0.z, l(0)
iadd r0.z, r0.z, r0.x
ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r3.xyzw, r0.z, u1.xyzw
utof r4.xyzw, r0.yyyy
mov r5.xyzw, -r3.xyzw
add r1.xyzw, r1.xyzw, r5.xyzw
mul r1.xyzw, r1.xyzw, r4.xyzw
add r1.xyzw, r1.xyzw, r3.xyzw  // r1.x <- position.x; r1.y <- position.y; r1.z <- position.z; r1.w <- position.w

#line 33
mov r0.yzw, -r1.xxyz
add r0.yzw, r0.yyzw, cb0[0].xxyz  // r0.y <- vec.x; r0.z <- vec.y; r0.w <- vec.z

#line 34
dp3 r0.y, r0.yzwy, r0.yzwy
sqrt r0.y, r0.y  // r0.y <- leng

#line 36
mul r0.z, cb0[0].w, l(0.400000)
mov r0.z, -r0.z
add r0.z, r0.z, r0.y  // r0.z <- l

#line 37
mul r0.w, cb0[0].w, l(0.100000)
div r0.z, r0.z, r0.w

#line 38
itof r0.w, l(0)
max r0.z, r0.w, r0.z

#line 39
itof r0.w, l(1)
min r0.z, r0.w, r0.z

#line 40
itof r3.xz, l(1, 0, 0, 0)
itof r4.xyz, l(0, 1, 1, 0)
mov r3.y, l(0.500000)
mov r5.xyz, -r3.xyzx
add r4.xyz, r4.xyzx, r5.xyzx
mul r4.xyz, r0.zzzz, r4.xyzx
add r3.xyz, r3.xyzx, r4.xyzx  // r3.x <- color.x; r3.y <- color.y; r3.z <- color.z

#line 41
mul r0.z, cb0[0].w, l(0.700000)
mov r0.z, -r0.z
add r0.y, r0.z, r0.y  // r0.y <- l

#line 42
div r0.y, r0.y, l(3.000000)

#line 43
itof r0.z, l(0)
max r0.y, r0.z, r0.y

#line 44
itof r0.z, l(1)
min r0.y, r0.z, r0.y

#line 45
itof r0.z, l(1)
itof r0.w, l(0)
mov r2.x, -r0.z
add r0.w, r0.w, r2.x
mul r0.y, r0.w, r0.y
add r3.w, r0.y, r0.z  // r3.w <- color.w

#line 48
mov r0.y, l(0)
iadd r0.y, r0.y, r0.x
store_raw u0.xyzw, r0.y, r1.xyzw

#line 49
mov r0.y, l(16)
iadd r0.y, r0.y, r0.x
store_raw u0.xyz, r0.y, r2.yzwy

#line 50
mov r0.y, l(28)
iadd r0.x, r0.y, r0.x
store_raw u0.xyzw, r0.x, r3.xyzw

#line 52
ret 
// Approximately 78 instruction slots used
