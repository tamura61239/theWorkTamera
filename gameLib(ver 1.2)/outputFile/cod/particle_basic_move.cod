//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CbScene
// {
//
//   float elapsdTime;                  // Offset:    0 Size:     4
//
// }
//
// cbuffer MoveData
// {
//
//   float4 endColor;                   // Offset:    0 Size:    16
//   float maxSpeed;                    // Offset:   16 Size:     4
//   float colorChangeTime;             // Offset:   20 Size:     4
//   float2 dummy;                      // Offset:   24 Size:     8 [unused]
//
// }
//
// Resource bind info for particleBuffer
// {
//
//   struct ParticleData
//   {
//       
//       float3 position;               // Offset:    0
//       float3 scale;                  // Offset:   12
//       float3 angle;                  // Offset:   24
//       float3 velocity;               // Offset:   36
//       float4 color;                  // Offset:   48
//       float3 accel;                  // Offset:   64
//       float life;                    // Offset:   76
//       float timer;                   // Offset:   80
//
//   } $Element;                        // Offset:    0 Size:    84
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// particleBuffer                        UAV  struct         r/w             u0      1 
// indexBuffer                           UAV    byte         r/w             u1      1 
// CbScene                           cbuffer      NA          NA            cb0      1 
// MoveData                          cbuffer      NA          NA            cb2      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB0[1], immediateIndexed
dcl_constantbuffer CB2[2], immediateIndexed
dcl_uav_structured u0, 84
dcl_uav_raw u1
dcl_input vThreadID.x
dcl_temps 7
dcl_thread_group 100, 1, 1
//
// Initial variable locations:
//   vThreadID.x <- DTid.x; vThreadID.y <- DTid.y; vThreadID.z <- DTid.z
//
#line 14 "D:\就職作品\01\gameLib(ver 1.2)\Source\Shader\particle_basic_move.hlsl"
ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r0.x, l(0), u1.xxxx
mov r0.x, r0.x  // r0.x <- particleCount

#line 15
ult r0.x, vThreadID.x, r0.x
if_nz r0.x

#line 17
  mov r0.x, l(4)
  imul null, r0.x, r0.x, vThreadID.x
  ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r0.x, r0.x, u1.xxxx  // r0.x <- particleIndex

#line 18
  ld_structured_indexable(structured_buffer, stride=84)(mixed,mixed,mixed,mixed) r0.y, r0.x, l(0), u0.xxxx  // r0.y <- particle.position.x
  ld_structured_indexable(structured_buffer, stride=84)(mixed,mixed,mixed,mixed) r0.z, r0.x, l(4), u0.xxxx  // r0.z <- particle.position.y
  ld_structured_indexable(structured_buffer, stride=84)(mixed,mixed,mixed,mixed) r0.w, r0.x, l(8), u0.xxxx  // r0.w <- particle.position.z
  ld_structured_indexable(structured_buffer, stride=84)(mixed,mixed,mixed,mixed) r1.x, r0.x, l(12), u0.xxxx  // r1.x <- particle.scale.x
  ld_structured_indexable(structured_buffer, stride=84)(mixed,mixed,mixed,mixed) r1.y, r0.x, l(16), u0.xxxx  // r1.y <- particle.scale.y
  ld_structured_indexable(structured_buffer, stride=84)(mixed,mixed,mixed,mixed) r1.z, r0.x, l(20), u0.xxxx  // r1.z <- particle.scale.z
  ld_structured_indexable(structured_buffer, stride=84)(mixed,mixed,mixed,mixed) r1.w, r0.x, l(24), u0.xxxx  // r1.w <- particle.angle.x
  ld_structured_indexable(structured_buffer, stride=84)(mixed,mixed,mixed,mixed) r2.x, r0.x, l(28), u0.xxxx  // r2.x <- particle.angle.y
  ld_structured_indexable(structured_buffer, stride=84)(mixed,mixed,mixed,mixed) r2.y, r0.x, l(32), u0.xxxx  // r2.y <- particle.angle.z
  ld_structured_indexable(structured_buffer, stride=84)(mixed,mixed,mixed,mixed) r3.x, r0.x, l(36), u0.xxxx
  ld_structured_indexable(structured_buffer, stride=84)(mixed,mixed,mixed,mixed) r3.y, r0.x, l(40), u0.xxxx
  ld_structured_indexable(structured_buffer, stride=84)(mixed,mixed,mixed,mixed) r3.z, r0.x, l(44), u0.xxxx
  ld_structured_indexable(structured_buffer, stride=84)(mixed,mixed,mixed,mixed) r4.x, r0.x, l(48), u0.xxxx
  ld_structured_indexable(structured_buffer, stride=84)(mixed,mixed,mixed,mixed) r4.y, r0.x, l(52), u0.xxxx
  ld_structured_indexable(structured_buffer, stride=84)(mixed,mixed,mixed,mixed) r4.z, r0.x, l(56), u0.xxxx
  ld_structured_indexable(structured_buffer, stride=84)(mixed,mixed,mixed,mixed) r4.w, r0.x, l(60), u0.xxxx
  ld_structured_indexable(structured_buffer, stride=84)(mixed,mixed,mixed,mixed) r5.y, r0.x, l(64), u0.xxxx  // r5.y <- particle.accel.x
  ld_structured_indexable(structured_buffer, stride=84)(mixed,mixed,mixed,mixed) r5.z, r0.x, l(68), u0.xxxx  // r5.z <- particle.accel.y
  ld_structured_indexable(structured_buffer, stride=84)(mixed,mixed,mixed,mixed) r5.w, r0.x, l(72), u0.xxxx  // r5.w <- particle.accel.z
  ld_structured_indexable(structured_buffer, stride=84)(mixed,mixed,mixed,mixed) r2.z, r0.x, l(76), u0.xxxx  // r2.z <- particle.life
  ld_structured_indexable(structured_buffer, stride=84)(mixed,mixed,mixed,mixed) r2.w, r0.x, l(80), u0.xxxx  // r2.w <- particle.timer
  mov r4.x, r4.x  // r4.x <- particle.color.x
  mov r4.y, r4.y  // r4.y <- particle.color.y
  mov r4.z, r4.z  // r4.z <- particle.color.z
  mov r4.w, r4.w  // r4.w <- particle.color.w
  mov r3.x, r3.x  // r3.x <- particle.velocity.x
  mov r3.y, r3.y  // r3.y <- particle.velocity.y
  mov r3.z, r3.z  // r3.z <- particle.velocity.z

#line 20
  mul r6.xyz, r5.yzwy, cb0[0].xxxx
  add r3.xyz, r3.xyzx, r6.xyzx

#line 22
  dp3 r3.w, r3.xyzx, r3.xyzx
  sqrt r3.w, r3.w  // r3.w <- len

#line 24
  dp3 r5.x, r3.xyzx, r3.xyzx
  rsq r5.x, r5.x
  mul r6.xyz, r3.xyzx, r5.xxxx  // r6.x <- vec.x; r6.y <- vec.y; r6.z <- vec.z

#line 26
  lt r3.w, cb2[1].x, r3.w
  if_nz r3.w

#line 28
    mul r3.xyz, r6.xyzx, cb2[1].xxxx

#line 29
  endif 

#line 30
  min r3.w, r2.w, cb2[1].y
  mov r6.xyzw, -r4.xyzw
  add r6.xyzw, r6.xyzw, cb2[0].xyzw
  mul r6.xyzw, r3.wwww, r6.xyzw
  add r4.xyzw, r4.xyzw, r6.xyzw

#line 32
  store_structured u0.x, r0.x, l(0), r0.y
  store_structured u0.x, r0.x, l(4), r0.z
  store_structured u0.x, r0.x, l(8), r0.w
  store_structured u0.x, r0.x, l(12), r1.x
  store_structured u0.x, r0.x, l(16), r1.y
  store_structured u0.x, r0.x, l(20), r1.z
  store_structured u0.x, r0.x, l(24), r1.w
  store_structured u0.x, r0.x, l(28), r2.x
  store_structured u0.x, r0.x, l(32), r2.y
  store_structured u0.x, r0.x, l(36), r3.x
  store_structured u0.x, r0.x, l(40), r3.y
  store_structured u0.x, r0.x, l(44), r3.z
  store_structured u0.x, r0.x, l(48), r4.x
  store_structured u0.x, r0.x, l(52), r4.y
  store_structured u0.x, r0.x, l(56), r4.z
  store_structured u0.x, r0.x, l(60), r4.w
  store_structured u0.x, r0.x, l(64), r5.y
  store_structured u0.x, r0.x, l(68), r5.z
  store_structured u0.x, r0.x, l(72), r5.w
  store_structured u0.x, r0.x, l(76), r2.z
  store_structured u0.x, r0.x, l(80), r2.w

#line 33
endif 

#line 34
ret 
// Approximately 74 instruction slots used
