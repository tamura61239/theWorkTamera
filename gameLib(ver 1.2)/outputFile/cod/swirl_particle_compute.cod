//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer Comstance
// {
//
//   float3 centerPosition;             // Offset:    0 Size:    12
//   float dummy;                       // Offset:   12 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// rwbParticle                           UAV    byte         r/w             u0      1 
// resetParticle                         UAV    byte         r/w             u1      1 
// Comstance                         cbuffer      NA          NA            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB1[1], immediateIndexed
dcl_uav_raw u0
dcl_uav_raw u1
dcl_input vThreadID.xyz
dcl_temps 6
dcl_thread_group 100, 1, 1
//
// Initial variable locations:
//   vThreadID.x <- DTid.x; vThreadID.y <- DTid.y; vThreadID.z <- DTid.z
//
#line 9 "D:\就職作品\01\gameLib(ver 1.2)\Source\Shader\swirl_particle_compute.hlsl"
mov r0.x, l(100)
imul null, r0.x, r0.x, vThreadID.z
mov r0.y, l(1)
imul null, r0.x, r0.y, r0.x
mov r0.y, l(100)
imul null, r0.y, r0.y, vThreadID.y
iadd r0.x, r0.y, r0.x
iadd r0.x, r0.x, vThreadID.x  // r0.x <- index

#line 11
mov r0.y, l(44)
imul null, r0.x, r0.y, r0.x  // r0.x <- bufferIndex

#line 12
mov r0.y, l(0)
iadd r0.y, r0.y, r0.x
ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r1.xyzw, r0.y, u0.xyzw  // r1.x <- position.x; r1.y <- position.y; r1.z <- position.z; r1.w <- position.w

#line 17
mov r0.yzw, -r1.xxyz
add r0.yzw, r0.yyzw, cb1[0].xxyz  // r0.y <- vec.x; r0.z <- vec.y; r0.w <- vec.z

#line 18
dp3 r2.x, r0.yzwy, r0.yzwy
sqrt r2.x, r2.x  // r2.x <- leng

#line 19
dp3 r2.y, r0.yzwy, r0.yzwy
rsq r2.y, r2.y
mul r0.yzw, r0.yyzw, r2.yyyy

#line 20
itof r2.yzw, l(0, 0, 0, 1)  // r2.y <- up.z; r2.z <- up.x; r2.w <- up.y

#line 23
mul r3.xyz, r0.wyzw, r2.wyzw
mul r2.yzw, r0.zzwy, r2.yyzw
mov r2.yzw, -r2.yyzw
add r2.yzw, r2.yyzw, r3.xxyz  // r2.y <- velocity.x; r2.z <- velocity.y; r2.w <- velocity.z

#line 24
add r0.yzw, r0.yyzw, r2.yyzw  // r0.y <- velocity.x; r0.z <- velocity.y; r0.w <- velocity.z

#line 25
dp3 r2.y, r0.yzwy, r0.yzwy
rsq r2.y, r2.y
mul r0.yzw, r0.yyzw, r2.yyyy

#line 27
mul r0.yzw, r0.yyzw, l(0.000000, 0.010000, 0.010000, 0.010000)

#line 28
add r1.xyz, r0.yzwy, r1.xyzx

#line 31
ge r2.x, r2.x, l(0.010000)
movc r2.x, r2.x, l(1.000000), l(0)
ftou r2.x, r2.x  // r2.x <- set

#line 32
mov r2.y, l(0)
iadd r2.y, r0.x, r2.y
ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r3.xyzw, r2.y, u1.xyzw
utof r2.xyzw, r2.xxxx
mov r4.xyzw, -r3.xyzw
add r1.xyzw, r1.xyzw, r4.xyzw
mul r1.xyzw, r1.xyzw, r2.xyzw
add r1.xyzw, r1.xyzw, r3.xyzw  // r1.x <- position.x; r1.y <- position.y; r1.z <- position.z; r1.w <- position.w

#line 34
mov r2.xyz, -r1.xyzx
add r2.xyz, r2.xyzx, cb1[0].xyzx  // r2.x <- vec.x; r2.y <- vec.y; r2.z <- vec.z

#line 35
dp3 r2.x, r2.xyzx, r2.xyzx
sqrt r2.x, r2.x  // r2.x <- leng

#line 37
mov r2.y, l(-4.000000)
add r2.y, r2.y, r2.x  // r2.y <- l

#line 38
itof r2.z, l(0)
max r2.y, r2.z, r2.y

#line 39
itof r2.z, l(1)
min r2.y, r2.z, r2.y

#line 40
itof r3.xz, l(1, 0, 0, 0)
itof r4.xyz, l(0, 1, 1, 0)
mov r3.y, l(0.500000)
mov r5.xyz, -r3.xyzx
add r4.xyz, r4.xyzx, r5.xyzx
mul r2.yzw, r2.yyyy, r4.xxyz
add r3.xyz, r2.yzwy, r3.xyzx  // r3.x <- color.x; r3.y <- color.y; r3.z <- color.z

#line 41
mov r2.y, l(-7.000000)
add r2.x, r2.y, r2.x  // r2.x <- l

#line 42
div r2.x, r2.x, l(3.000000)

#line 43
itof r2.y, l(0)
max r2.x, r2.y, r2.x

#line 44
itof r2.y, l(1)
min r2.x, r2.y, r2.x

#line 45
itof r2.y, l(1)
itof r2.z, l(0)
mov r2.w, -r2.y
add r2.z, r2.w, r2.z
mul r2.x, r2.z, r2.x
add r3.w, r2.x, r2.y  // r3.w <- color.w

#line 46
mov r2.x, l(0)
iadd r2.x, r0.x, r2.x
store_raw u0.xyzw, r2.x, r1.xyzw

#line 47
mov r1.x, l(16)
iadd r1.x, r0.x, r1.x
store_raw u0.xyz, r1.x, r0.yzwy

#line 48
mov r0.y, l(28)
iadd r0.x, r0.y, r0.x
store_raw u0.xyzw, r0.x, r3.xyzw

#line 50
ret 
// Approximately 82 instruction slots used
