//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CbCreate
// {
//
//   float startIndex;                  // Offset:    0 Size:     4
//   uint startColor;                   // Offset:    4 Size:     4
//   float scale;                       // Offset:    8 Size:     4
//   float life;                        // Offset:   12 Size:     4
//   float speed;                       // Offset:   16 Size:     4
//
// }
//
// cbuffer CbBone
// {
//
//   row_major float4x4 boneWorld[128]; // Offset:    0 Size:  8192
//
// }
//
// Resource bind info for vertexBuffer
// {
//
//   struct Vertex
//   {
//       
//       float3 position;               // Offset:    0
//       float3 normal;                 // Offset:   12
//       float2 texcoord;               // Offset:   24
//       float4 bone_weight;            // Offset:   32
//       uint4 bone_index;              // Offset:   48
//
//   } $Element;                        // Offset:    0 Size:    64
//
// }
//
// Resource bind info for indexBuffer
// {
//
//   int $Element;                      // Offset:    0 Size:     4
//
// }
//
// Resource bind info for particleBuffer
// {
//
//   struct Particle
//   {
//       
//       float3 position;               // Offset:    0
//       float3 velocity;               // Offset:   12
//       float scale;                   // Offset:   24
//       float life;                    // Offset:   28
//       uint color;                    // Offset:   32
//
//   } $Element;                        // Offset:    0 Size:    36
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// vertexBuffer                      texture  struct         r/o             t0      1 
// indexBuffer                       texture  struct         r/o             t1      1 
// particleBuffer                        UAV  struct         r/w             u0      1 
// CbCreate                          cbuffer      NA          NA            cb0      1 
// CbBone                            cbuffer      NA          NA            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000},
                              { -1, 0, 0, 0},
                              { 0, -1, 0, 0},
                              { 0, 0, -1, 0},
                              { 0, 0, 0, -1} }
dcl_constantbuffer CB0[2], immediateIndexed
dcl_constantbuffer CB1[512], dynamicIndexed
dcl_resource_structured t0, 64
dcl_resource_structured t1, 4
dcl_uav_structured u0, 36
dcl_input vThreadID.x
dcl_temps 10
dcl_indexableTemp x0[3], 4
dcl_thread_group 1, 1, 1
//
// Initial variable locations:
//   vThreadID.x <- DTid.x; vThreadID.y <- DTid.y; vThreadID.z <- DTid.z; 
//   x0 <- pos
//
#line 6 "D:\就職作品\01\gameLib(ver 1.2)\Source\Shader\gpu_skinned_mesh_create_praticle_cs.hlsl"
itof r0.xyz, l(0, 0, 0, 0)  // r0.x <- normal.x; r0.y <- normal.y; r0.z <- normal.z

#line 19
itof r1.xyz, l(0, 0, 0, 0)
itof r2.xyz, l(0, 0, 0, 0)
itof r3.xyz, l(0, 0, 0, 0)
mov x0[0].xyz, r1.xyzx
mov x0[1].xyz, r2.xyzx
mov x0[2].xyz, r3.xyzx

#line 20
mov r0.w, l(0)  // r0.w <- i
mov r1.xyz, r0.xyzx  // r1.x <- normal.x; r1.y <- normal.y; r1.z <- normal.z
mov r1.w, r0.w  // r1.w <- i
loop 
  ilt r2.x, r1.w, l(3)
  breakc_z r2.x

#line 22
  mov r2.x, l(3)
  imul null, r2.x, r2.x, vThreadID.x
  iadd r2.x, r1.w, r2.x
  ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r2.x, r2.x, l(0), t1.xxxx  // r2.x <- index

#line 23
  ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r2.y, r2.x, l(0), t0.xxxx  // r2.y <- vertex.position.x
  ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r2.z, r2.x, l(4), t0.xxxx  // r2.z <- vertex.position.y
  ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r2.w, r2.x, l(8), t0.xxxx  // r2.w <- vertex.position.z
  ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r3.x, r2.x, l(12), t0.xxxx  // r3.x <- vertex.normal.x
  ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r3.y, r2.x, l(16), t0.xxxx  // r3.y <- vertex.normal.y
  ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r3.z, r2.x, l(20), t0.xxxx  // r3.z <- vertex.normal.z
  ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r4.x, r2.x, l(32), t0.xxxx  // r4.x <- vertex.bone_weight.x
  ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r4.y, r2.x, l(36), t0.xxxx  // r4.y <- vertex.bone_weight.y
  ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r4.z, r2.x, l(40), t0.xxxx  // r4.z <- vertex.bone_weight.z
  ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r4.w, r2.x, l(44), t0.xxxx  // r4.w <- vertex.bone_weight.w
  ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r5.x, r2.x, l(48), t0.xxxx  // r5.x <- vertex.bone_index.x
  ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r5.y, r2.x, l(52), t0.xxxx  // r5.y <- vertex.bone_index.y
  ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r5.z, r2.x, l(56), t0.xxxx  // r5.z <- vertex.bone_index.z
  ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r5.w, r2.x, l(60), t0.xxxx  // r5.w <- vertex.bone_index.w

#line 24
  mov r2.x, l(0)  // r2.x <- j
  mov r6.xyz, r1.xyzx  // r6.x <- normal.x; r6.y <- normal.y; r6.z <- normal.z
  mov r3.w, r2.x  // r3.w <- j
  loop 
    ilt r6.w, r3.w, l(4)
    breakc_z r6.w

#line 26
    mov r6.w, r1.w
    dp4 r7.x, r4.xyzw, icb[r3.w + 0].xyzw
    itof r7.y, l(1)
    and r8.xyzw, r5.xyzw, icb[r3.w + 4].xyzw
    or r7.zw, r8.yyyw, r8.xxxz
    or r7.z, r7.w, r7.z
    imul null, r7.z, r7.z, l(4)
    mul r8.xyz, r2.yyyy, cb1[r7.z + 0].xyzx
    mul r9.xyz, r2.zzzz, cb1[r7.z + 1].xyzx
    add r8.xyz, r8.xyzx, r9.xyzx
    mul r9.xyz, r2.wwww, cb1[r7.z + 2].xyzx
    add r8.xyz, r8.xyzx, r9.xyzx
    mul r7.yzw, r7.yyyy, cb1[r7.z + 3].xxyz
    add r7.yzw, r7.yyzw, r8.xxyz
    mul r7.xyz, r7.yzwy, r7.xxxx
    mov r8.xyz, x0[r6.w + 0].xyzx
    add r7.xyz, r7.xyzx, r8.xyzx
    mov x0[r6.w + 0].xyz, r7.xyzx

#line 27
    dp4 r6.w, r4.xyzw, icb[r3.w + 0].xyzw
    and r7.xyzw, r5.xyzw, icb[r3.w + 4].xyzw
    or r7.xy, r7.ywyy, r7.xzxx
    or r7.x, r7.y, r7.x
    imul null, r7.x, r7.x, l(4)
    mul r7.yzw, r3.xxxx, cb1[r7.x + 0].xxyz
    mul r8.xyz, r3.yyyy, cb1[r7.x + 1].xyzx
    add r7.yzw, r7.yyzw, r8.xxyz
    mul r8.xyz, r3.zzzz, cb1[r7.x + 2].xyzx
    add r7.xyz, r7.yzwy, r8.xyzx
    mul r7.xyz, r6.wwww, r7.xyzx
    add r6.xyz, r6.xyzx, r7.xyzx

#line 28
    iadd r3.w, r3.w, l(1)
  endloop 
  mov r1.xyz, r6.xyzx  // r1.x <- normal.x; r1.y <- normal.y; r1.z <- normal.z

#line 29
  iadd r1.w, r1.w, l(1)
endloop 

#line 31
mov r0.xyz, x0[1].xyzx
mov r2.xyz, x0[0].xyzx
mov r2.xyz, -r2.xyzx
add r0.xyz, r0.xyzx, r2.xyzx
nop 
utof r0.w, vThreadID.x
add r0.w, r0.w, cb0[0].x
itof r1.w, l(621)
mul r2.x, r0.w, r1.w
mov r2.y, -r2.x
ge r2.x, r2.x, r2.y
mov r2.y, -r1.w
movc r1.w, r2.x, r1.w, r2.y
div r2.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.w
mul r0.w, r0.w, r2.x
frc r0.w, r0.w
mul r2.x, r0.w, r1.w
mov r0.w, l(3)
imul null, r0.w, r0.w, vThreadID.x
mov r1.w, l(439)
udiv null, r0.w, r0.w, r1.w
utof r2.y, r0.w
mov r0.w, l(0.500000)

#line 15 "D:\就職作品\01\gameLib(ver 1.2)\Source\Shader\Lib\rand_function.hlsli"
dp2 r1.w, r2.xyxx, r2.xyxx
rsq r1.w, r1.w
mul r2.xy, r1.wwww, r2.xyxx
dp2 r1.w, r2.xyxx, l(0.163797, 0.986494, 0.000000, 0.000000)
sincos r1.w, null, r1.w
mul r1.w, r1.w, l(43758.546875)
frc r2.xy, r1.wwww  // r2.x <- noise.x; r2.y <- noise.y

#line 16
add r1.w, r2.y, r2.x
mov r2.x, -r1.w
max r1.w, r1.w, r2.x
mul r0.w, r0.w, r1.w  // r0.w <- <rand_1_normal return value>

#line 31 "D:\就職作品\01\gameLib(ver 1.2)\Source\Shader\gpu_skinned_mesh_create_praticle_cs.hlsl"
max r0.w, r0.w, l(0.000000)
min r0.w, r0.w, l(1.000000)
mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- vec1.x; r0.y <- vec1.y; r0.z <- vec1.z

#line 32
mov r2.xyz, x0[2].xyzx
mov r3.xyz, x0[0].xyzx
mov r3.xyz, -r3.xyzx
add r2.xyz, r2.xyzx, r3.xyzx
nop 
mov r0.w, l(3)
imul null, r0.w, r0.w, vThreadID.x
mov r1.w, l(756)
udiv null, r0.w, r0.w, r1.w
utof r1.w, vThreadID.x
add r1.w, r1.w, cb0[0].x
itof r2.w, l(394)
mul r3.x, r1.w, r2.w
mov r3.y, -r3.x
ge r3.x, r3.x, r3.y
mov r3.y, -r2.w
movc r2.w, r3.x, r2.w, r3.y
div r3.x, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
mul r1.w, r1.w, r3.x
frc r1.w, r1.w
mul r3.y, r1.w, r2.w
utof r3.x, r0.w
mov r0.w, l(0.500000)

#line 15 "D:\就職作品\01\gameLib(ver 1.2)\Source\Shader\Lib\rand_function.hlsli"
dp2 r1.w, r3.xyxx, r3.xyxx
rsq r1.w, r1.w
mul r3.xy, r1.wwww, r3.xyxx
dp2 r1.w, r3.xyxx, l(0.163797, 0.986494, 0.000000, 0.000000)
sincos r1.w, null, r1.w
mul r1.w, r1.w, l(43758.546875)
frc r3.xy, r1.wwww  // r3.x <- noise.x; r3.y <- noise.y

#line 16
add r1.w, r3.y, r3.x
mov r2.w, -r1.w
max r1.w, r1.w, r2.w
mul r0.w, r0.w, r1.w  // r0.w <- <rand_1_normal return value>

#line 32 "D:\就職作品\01\gameLib(ver 1.2)\Source\Shader\gpu_skinned_mesh_create_praticle_cs.hlsl"
max r0.w, r0.w, l(0.000000)
min r0.w, r0.w, l(1.000000)
mul r2.xyz, r0.wwww, r2.xyzx  // r2.x <- vec2.x; r2.y <- vec2.y; r2.z <- vec2.z

#line 34
mov r3.xyz, -r0.xyzx
add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- vec3.x; r2.y <- vec3.y; r2.z <- vec3.z

#line 36
nop 
utof r0.w, vThreadID.x
add r0.w, r0.w, cb0[0].x
itof r1.w, l(567)
mul r2.w, r0.w, r1.w
mov r3.x, -r2.w
ge r2.w, r2.w, r3.x
mov r3.x, -r1.w
movc r1.w, r2.w, r1.w, r3.x
div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.w
mul r0.w, r0.w, r2.w
frc r0.w, r0.w
mul r3.x, r0.w, r1.w
utof r0.w, vThreadID.x
add r0.w, r0.w, cb0[0].x
itof r1.w, l(381)
mul r2.w, r0.w, r1.w
mov r3.z, -r2.w
ge r2.w, r2.w, r3.z
mov r3.z, -r1.w
movc r1.w, r2.w, r1.w, r3.z
div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.w
mul r0.w, r0.w, r2.w
frc r0.w, r0.w
mul r3.y, r0.w, r1.w
mov r0.w, l(0.500000)

#line 15 "D:\就職作品\01\gameLib(ver 1.2)\Source\Shader\Lib\rand_function.hlsli"
dp2 r1.w, r3.xyxx, r3.xyxx
rsq r1.w, r1.w
mul r3.xy, r1.wwww, r3.xyxx
dp2 r1.w, r3.xyxx, l(0.163797, 0.986494, 0.000000, 0.000000)
sincos r1.w, null, r1.w
mul r1.w, r1.w, l(43758.546875)
frc r3.xy, r1.wwww  // r3.x <- noise.x; r3.y <- noise.y

#line 16
add r1.w, r3.y, r3.x
mov r2.w, -r1.w
max r1.w, r1.w, r2.w
mul r0.w, r0.w, r1.w  // r0.w <- <rand_1_normal return value>

#line 36 "D:\就職作品\01\gameLib(ver 1.2)\Source\Shader\gpu_skinned_mesh_create_praticle_cs.hlsl"
max r0.w, r0.w, l(0.000000)
min r0.w, r0.w, l(1.000000)
mul r2.xyz, r0.wwww, r2.xyzx

#line 37
mov r3.xyz, x0[0].xyzx
add r0.xyz, r0.xyzx, r3.xyzx
add r0.xyz, r2.xyzx, r0.xyzx  // r0.x <- position.x; r0.y <- position.y; r0.z <- position.z

#line 38
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r1.xyzx

#line 40
mov r0.xyz, r0.xyzx  // r0.x <- p.position.x; r0.y <- p.position.y; r0.z <- p.position.z

#line 41
mov r0.w, cb0[0].y  // r0.w <- p.color

#line 42
mov r1.w, cb0[0].w  // r1.w <- p.life

#line 43
mov r2.x, cb0[0].z  // r2.x <- p.scale

#line 44
mul r1.xyz, r1.xyzx, cb0[1].xxxx  // r1.x <- p.velocity.x; r1.y <- p.velocity.y; r1.z <- p.velocity.z

#line 45
utof r2.y, vThreadID.x
add r2.y, r2.y, cb0[0].x
ftou r2.y, r2.y
store_structured u0.x, r2.y, l(0), r0.x
store_structured u0.x, r2.y, l(4), r0.y
store_structured u0.x, r2.y, l(8), r0.z
store_structured u0.x, r2.y, l(12), r1.x
store_structured u0.x, r2.y, l(16), r1.y
store_structured u0.x, r2.y, l(20), r1.z
store_structured u0.x, r2.y, l(24), r2.x
store_structured u0.x, r2.y, l(28), r1.w
store_structured u0.x, r2.y, l(32), r0.w

#line 46
ret 
// Approximately 212 instruction slots used
