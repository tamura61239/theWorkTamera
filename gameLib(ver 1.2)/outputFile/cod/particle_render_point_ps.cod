//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float      w
// POSITION                 0   xyz         1     NONE   float       
// SCALE                    0   xyz         2     NONE   float       
// ROTATE                   0   xyz         3     NONE   float       
// ROTATE                   1   xyz         4     NONE   float       
// ROTATE                   2   xyz         5     NONE   float       
// COLOR                    0   xyzw        6     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_input_ps_siv linear noperspective v0.w, position
dcl_input_ps linear v6.xyzw
dcl_output o0.xyzw
dcl_temps 1
//
// Initial variable locations:
//   v0.x <- pin.position.x; v0.y <- pin.position.y; v0.z <- pin.position.z; v0.w <- pin.position.w; 
//   v1.x <- pin.worldPosition.x; v1.y <- pin.worldPosition.y; v1.z <- pin.worldPosition.z; 
//   v2.x <- pin.scale.x; v2.y <- pin.scale.y; v2.z <- pin.scale.z; 
//   v3.x <- pin.rotateMatrix._m00; v3.y <- pin.rotateMatrix._m10; v3.z <- pin.rotateMatrix._m20; 
//   v4.x <- pin.rotateMatrix._m01; v4.y <- pin.rotateMatrix._m11; v4.z <- pin.rotateMatrix._m21; 
//   v5.x <- pin.rotateMatrix._m02; v5.y <- pin.rotateMatrix._m12; v5.z <- pin.rotateMatrix._m22; 
//   v6.x <- pin.color.x; v6.y <- pin.color.y; v6.z <- pin.color.z; v6.w <- pin.color.w; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
//
#line 5 "D:\就職作品\01\gameLib(ver 1.2)\Source\Shader\particle_render_point_ps.hlsl"
itof r0.x, l(0)
ge r0.x, r0.x, v0.w
if_nz r0.x

#line 7
  discard_nz l(-1)

#line 8
endif 

#line 9
mov o0.xyzw, v6.xyzw
ret 
// Approximately 7 instruction slots used
