//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer ConputeComstance
// {
//
//   float startIndex;                  // Offset:    0 Size:     4
//   float indexSize;                   // Offset:    4 Size:     4
//   float2 maxLength;                  // Offset:    8 Size:     8
//   float3 windVelocity;               // Offset:   16 Size:    12
//   float windPower;                   // Offset:   28 Size:     4 [unused]
//
// }
//
// cbuffer SwirlConstance
// {
//
//   struct Swirl
//   {
//       
//       float3 centerPosition;         // Offset:    0
//       float swirlLength;             // Offset:   12
//       float flag;                    // Offset:   16
//       float3 swirlDummy;             // Offset:   20
//
//   } swirl[10];                       // Offset:    0 Size:   320
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// rwParticle                            UAV    byte         r/w             u0      1 
// resetParticle                         UAV    byte         r/w             u1      1 
// ConputeComstance                  cbuffer      NA          NA            cb0      1 
// SwirlConstance                    cbuffer      NA          NA            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB0[2], immediateIndexed
dcl_constantbuffer CB1[20], dynamicIndexed
dcl_uav_raw u0
dcl_uav_raw u1
dcl_input vThreadID.xyz
dcl_temps 10
dcl_thread_group 100, 1, 1
//
// Initial variable locations:
//   vThreadID.x <- DTid.x; vThreadID.y <- DTid.y; vThreadID.z <- DTid.z
//
#line 25 "D:\就職作品\01\gameLib(ver 1.2)\Source\Shader\cloud_particle_compute.hlsl"
iadd r0.x, vThreadID.y, vThreadID.z
iadd r0.x, r0.x, vThreadID.x  // r0.x <- index

#line 27
mov r0.y, l(44)
imul null, r0.y, r0.y, r0.x  // r0.y <- bufferIndex

#line 28
mov r0.z, l(40)
imul null, r0.z, r0.z, r0.x  // r0.z <- resetBufferIndex

#line 29
mov r0.w, l(0)
iadd r0.w, r0.w, r0.y
ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r1.xyzw, r0.w, u0.xyzw
mov r1.xyzw, r1.xyzw  // r1.x <- position.x; r1.y <- position.y; r1.z <- position.z; r1.w <- position.w

#line 30
mov r0.w, l(28)
iadd r0.w, r0.w, r0.y
iadd r0.w, r0.w, l(12)
ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r0.w, r0.w, u0.xxxx
mov r0.w, r0.w  // r0.w <- color.w

#line 32
mov r2.x, l(0)
iadd r2.x, r0.z, r2.x
ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r2.xyzw, r2.x, u1.xyzw
mov r2.xyzw, r2.xyzw  // r2.x <- startPosition.x; r2.y <- startPosition.y; r2.z <- startPosition.z; r2.w <- startPosition.w

#line 33
mov r3.x, l(24)
iadd r3.x, r0.z, r3.x
ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r3.xyzw, r3.x, u1.xyzw
mov r3.xyzw, r3.xyzw  // r3.x <- startColor.x; r3.y <- startColor.y; r3.z <- startColor.z; r3.w <- startColor.w

#line 34
utof r4.x, r0.x
ge r4.x, r4.x, cb0[0].x
movc r4.x, r4.x, l(1.000000), l(0)
add r4.y, cb0[0].y, cb0[0].x
utof r0.x, r0.x
ge r0.x, r0.x, r4.y
movc r0.x, r0.x, l(1.000000), l(0)
mov r0.x, -r0.x
add r0.x, r0.x, r4.x
itof r4.x, l(0)
max r0.x, r0.x, r4.x  // r0.x <- start

#line 42
mov r4.xyzw, -r1.xyzw
add r4.xyzw, r2.xyzw, r4.xyzw
mul r4.xyzw, r0.xxxx, r4.xyzw
add r1.xyzw, r1.xyzw, r4.xyzw

#line 43
mov r4.x, -r0.w
add r4.x, r3.w, r4.x
mul r0.x, r0.x, r4.x
add r0.x, r0.x, r0.w  // r0.x <- color.w

#line 44
mov r0.w, l(16)
iadd r0.w, r0.w, r0.z
ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r0.w, r0.w, u1.xxxx
mov r0.w, r0.w  // r0.w <- mass

#line 45
mov r4.x, l(20)
iadd r0.z, r0.z, r4.x
ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r0.z, r0.z, u1.xxxx
mov r0.z, r0.z  // r0.z <- size

#line 47
div r4.z, r0.w, r0.z  // r4.z <- density

#line 48
div r5.xyz, cb0[1].xyzx, r4.zzzz  // r5.x <- velocity.x; r5.y <- velocity.y; r5.z <- velocity.z

#line 49
add r1.xyz, r1.xyzx, r5.xyzx

#line 50
div r4.w, r0.z, r0.w
mov r5.x, -r0.x
add r4.w, r4.w, r5.x
mul r4.w, r4.w, l(0.100000)
add r0.x, r0.x, r4.w

#line 51
div r4.x, r0.z, r0.w  // r4.x <- color.x

#line 52
itof r4.y, l(0)  // r4.y <- color.y

#line 53
mov r4.z, r4.z  // r4.z <- color.z

#line 54
dp3 r0.z, r4.xyzx, r4.xyzx
rsq r0.z, r0.z
mul r4.xyw, r0.zzzz, r4.xyxz  // r4.w <- color.z

#line 57
mov r0.z, l(0)  // r0.z <- i
mov r5.xyz, r4.xywx  // r5.x <- color.x; r5.y <- color.y; r5.z <- color.z
mov r5.w, r0.x  // r5.w <- color.w
mov r6.xz, r1.xxzx  // r6.x <- position.x; r6.z <- position.z
mov r6.y, r1.y  // r6.y <- position.y
mov r6.w, r1.w  // r6.w <- position.w
mov r0.w, r0.z  // r0.w <- i
loop 
  ilt r7.x, r0.w, l(10)
  breakc_z r7.x

#line 59
  imul null, r7.x, r0.w, l(2)
  mov r7.yzw, -r6.xxyz
  add r7.xyz, r7.yzwy, cb1[r7.x + 0].xyzx  // r7.x <- vec.x; r7.y <- vec.y; r7.z <- vec.z

#line 60
  dp3 r7.w, r7.xyzx, r7.xyzx
  sqrt r7.w, r7.w  // r7.w <- leng

#line 61
  dp3 r8.x, r7.xyzx, r7.xyzx
  rsq r8.x, r8.x
  mul r7.xyz, r7.xyzx, r8.xxxx

#line 62
  itof r8.xyz, l(0, 0, 1, 0)  // r8.x <- up.z; r8.y <- up.x; r8.z <- up.y

#line 63
  mul r9.xyz, r7.zxyz, r8.zxyz
  mul r8.xyz, r7.yzxy, r8.xyzx
  mov r8.xyz, -r8.xyzx
  add r8.xyz, r8.xyzx, r9.xyzx  // r8.x <- swirlVec.x; r8.y <- swirlVec.y; r8.z <- swirlVec.z

#line 64
  itof r9.xyz, l(0, 0, 0, 0)
  add r7.xyz, r7.xyzx, r8.xyzx
  imul null, r8.x, r0.w, l(2)
  ge r8.x, cb1[r8.x + 0].w, r7.w
  movc r8.x, r8.x, l(1.000000), l(0)
  mov r8.yzw, -r9.xxyz
  add r7.xyz, r7.xyzx, r8.yzwy
  mul r7.xyz, r7.xyzx, r8.xxxx
  add r7.xyz, r7.xyzx, r9.xyzx  // r7.x <- swirlVelocity.x; r7.y <- swirlVelocity.y; r7.z <- swirlVelocity.z

#line 65
  div r7.xyz, r7.xyzx, r4.zzzz

#line 66
  imul null, r8.x, r0.w, l(2)
  mul r7.xyz, r7.xyzx, cb1[r8.x + 1].xxxx
  add r6.xyz, r6.xyzx, r7.xyzx

#line 67
  ge r7.x, l(1.000000), r7.w
  movc r7.x, r7.x, l(1.000000), l(0)
  imul null, r7.y, r0.w, l(2)
  mul r7.x, r7.x, cb1[r7.y + 1].x
  ftou r7.x, r7.x  // r7.x <- set

#line 68
  utof r8.xyzw, r7.xxxx
  mov r9.xyzw, -r6.xyzw
  add r9.xyzw, r2.xyzw, r9.xyzw
  mul r8.xyzw, r8.xyzw, r9.xyzw
  add r6.xyzw, r6.xyzw, r8.xyzw

#line 69
  utof r7.xyzw, r7.xxxx
  mov r8.xyzw, -r5.xyzw
  add r8.xyzw, r3.xyzw, r8.xyzw
  mul r7.xyzw, r7.xyzw, r8.xyzw
  add r5.xyzw, r5.xyzw, r7.xyzw

#line 70
  iadd r0.w, r0.w, l(1)
endloop 

#line 72
mov r0.x, -r6.x
add r0.x, r0.x, r2.x
mov r0.z, -r0.x
max r0.x, r0.z, r0.x
ge r0.x, r0.x, cb0[0].z
movc r0.x, r0.x, l(1.000000), l(0)  // r0.x <- x

#line 73
mov r0.z, -r6.z
add r0.z, r0.z, r2.z
mov r0.w, -r0.z
max r0.z, r0.w, r0.z
ge r0.z, r0.z, cb0[0].w
movc r0.z, r0.z, l(1.000000), l(0)  // r0.z <- z

#line 75
add r0.x, r0.z, r0.x
itof r0.z, l(1)
min r0.x, r0.z, r0.x
ftou r0.x, r0.x  // r0.x <- set

#line 77
utof r1.xyzw, r0.xxxx
mov r4.xyzw, -r6.xyzw
add r2.xyzw, r2.xyzw, r4.xyzw
mul r1.xyzw, r1.xyzw, r2.xyzw
add r1.xyzw, r1.xyzw, r6.xyzw  // r1.x <- position.x; r1.y <- position.y; r1.z <- position.z; r1.w <- position.w

#line 78
utof r2.xyzw, r0.xxxx
mov r4.xyzw, -r5.xyzw
add r3.xyzw, r3.xyzw, r4.xyzw
mul r2.xyzw, r2.xyzw, r3.xyzw
add r2.xyzw, r2.xyzw, r5.xyzw  // r2.x <- color.x; r2.y <- color.y; r2.z <- color.z; r2.w <- color.w

#line 80
mov r0.x, l(0)
iadd r0.x, r0.x, r0.y
store_raw u0.xyzw, r0.x, r1.xyzw

#line 81
mov r0.x, l(28)
iadd r0.x, r0.x, r0.y
store_raw u0.xyzw, r0.x, r2.xyzw

#line 83
ret 
// Approximately 150 instruction slots used
