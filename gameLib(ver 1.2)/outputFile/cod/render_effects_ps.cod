//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CONSTANT_BUFFER
// {
//
//   row_major float4x4 inverseViewProjection;// Offset:    0 Size:    64
//   row_major float4x4 lightViewProjection;// Offset:   64 Size:    64
//   
//   struct SaveData
//   {
//       
//       float3 shadowColor;            // Offset:  128
//       float shadowBisa;              // Offset:  140
//       float slopeScaledBias;         // Offset:  144
//       float depthBiasClamp;          // Offset:  148
//       float2 dummy;                  // Offset:  152
//
//   } data;                            // Offset:  128 Size:    32
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// color_map_sampler_state           sampler      NA          NA             s0      1 
// shadow_map_sampler_state        sampler_c      NA          NA             s1      1 
// color_map                         texture  float4          2d             t0      1 
// depth_map                         texture  float4          2d             t1      1 
// shadow_map                        texture  float4          2d             t2      1 
// CONSTANT_BUFFER                   cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// SV_SAMPLEINDEX           0   x           2   SAMPLE    uint       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB0[10], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 4
//
// Initial variable locations:
//   v0.x <- pin.position.x; v0.y <- pin.position.y; v0.z <- pin.position.z; v0.w <- pin.position.w; 
//   v1.x <- pin.texcoord.x; v1.y <- pin.texcoord.y; 
//   v2.x <- sample_index; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
//
#line 14 "D:\就職作品\01\gameLib(ver 1.2)\Source\Shader\Lib\render_effects_ps.hlsl"
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0  // r0.x <- colorMapColour.x; r0.y <- colorMapColour.y; r0.z <- colorMapColour.z; r0.w <- colorMapColour.w

#line 15
sample_indexable(texture2d)(float,float,float,float) r1.x, v1.xyxx, t1.xyzw, s0
mov r1.x, r1.x  // r1.x <- depthMapColour.x

#line 17
mov r0.xyz, r0.xyzx  // r0.x <- fragmentColour.x; r0.y <- fragmentColour.y; r0.z <- fragmentColour.z

#line 18
mov r0.w, r0.w  // r0.w <- alpha

#line 21
itof r1.y, l(2)
mul r1.y, r1.y, v1.x
itof r1.z, l(1)
mov r1.z, -r1.z
add r1.y, r1.z, r1.y  // r1.y <- ndcPosition.x

#line 22
itof r1.z, l(-2)
mul r1.z, r1.z, v1.y
itof r1.w, l(1)
add r1.z, r1.w, r1.z  // r1.z <- ndcPosition.y

#line 23
mov r1.x, r1.x  // r1.x <- ndcPosition.z

#line 24
itof r1.w, l(1)  // r1.w <- ndcPosition.w

#line 26
mul r2.xyzw, r1.yyyy, cb0[0].xyzw
mul r3.xyzw, r1.zzzz, cb0[1].xyzw
add r2.xyzw, r2.xyzw, r3.xyzw
mul r3.xyzw, r1.xxxx, cb0[2].xyzw
add r2.xyzw, r2.xyzw, r3.xyzw
mul r1.xyzw, r1.wwww, cb0[3].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw  // r1.x <- worldPosition.x; r1.y <- worldPosition.y; r1.z <- worldPosition.z; r1.w <- worldPosition.w

#line 27
div r1.xyzw, r1.xyzw, r1.wwww

#line 29
mul r2.xyzw, r1.xxxx, cb0[4].xyzw
mul r3.xyzw, r1.yyyy, cb0[5].xyzw
add r2.xyzw, r2.xyzw, r3.xyzw
mul r3.xyzw, r1.zzzz, cb0[6].xyzw
add r2.xyzw, r2.xyzw, r3.xyzw
mul r1.xyzw, r1.wwww, cb0[7].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw  // r1.x <- lightViewPosition.x; r1.y <- lightViewPosition.y; r1.z <- lightViewPosition.z; r1.w <- lightViewPosition.w

#line 30
div r1.xyz, r1.xyzx, r1.wwww

#line 32
itof r1.w, l(1)
lt r1.w, r1.z, r1.w
itof r2.x, l(0)
lt r2.x, r2.x, r1.z
and r1.w, r1.w, r2.x
if_nz r1.w

#line 34
  deriv_rtx_coarse r1.w, r1.z
  mov r2.x, -r1.w
  max r1.w, r1.w, r2.x
  deriv_rty_coarse r2.x, r1.z
  mov r2.y, -r2.x
  max r2.x, r2.y, r2.x
  max r1.w, r1.w, r2.x  // r1.w <- maxDepthSlope

#line 36
  mul r1.w, r1.w, cb0[9].x
  add r1.w, r1.w, cb0[8].w  // r1.w <- shadowBias2

#line 37
  min r1.w, r1.w, cb0[9].y

#line 40
  mul r1.x, r1.x, l(0.500000)
  add r2.x, r1.x, l(0.500000)  // r2.x <- lightViewPosition.x

#line 41
  mul r1.x, r1.y, l(-0.500000)
  add r2.y, r1.x, l(0.500000)  // r2.y <- lightViewPosition.y

#line 42
  mov r1.x, -r1.w
  add r1.x, r1.x, r1.z
  sample_c_lz_indexable(texture2d)(float,float,float,float) r1.x, r2.xyxx, t2.xxxx, s1, r1.x  // r1.x <- shadowThreshold

#line 44
  mov r1.y, -cb0[8].x
  add r1.y, r1.y, l(1.000000)
  mul r1.x, r1.y, r1.x
  add r1.x, r1.x, cb0[8].x  // r1.x <- shadowThreshold

#line 46
  mul r0.xyz, r0.xyzx, r1.xxxx

#line 47
endif 

#line 60
mov o0.xyz, r0.xyzx
mov o0.w, r0.w
ret 
// Approximately 64 instruction slots used
