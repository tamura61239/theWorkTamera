//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// rwbParticle                           UAV    byte         r/w             u0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_uav_raw u0
dcl_input vThreadID.xyz
dcl_temps 5
dcl_thread_group 100, 1, 1
//
// Initial variable locations:
//   vThreadID.x <- DTid.x; vThreadID.y <- DTid.y; vThreadID.z <- DTid.z
//
#line 7 "D:\就職作品\01\gameLib(ver 1.2)\Source\Shader\compute_test.hlsl"
mov r0.x, l(100)
imul null, r0.x, r0.x, vThreadID.z
mov r0.y, l(1)
imul null, r0.x, r0.y, r0.x
mov r0.y, l(100)
imul null, r0.y, r0.y, vThreadID.y
iadd r0.x, r0.y, r0.x
iadd r0.x, r0.x, vThreadID.x  // r0.x <- index

#line 9
mov r0.y, l(44)
imul null, r0.x, r0.y, r0.x  // r0.x <- bufferIndex

#line 10
mov r0.y, l(0)
iadd r0.y, r0.y, r0.x
ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r1.xyzw, r0.y, u0.xyzw
mov r1.xyzw, r1.xyzw  // r1.x <- position.x; r1.y <- position.y; r1.z <- position.z; r1.w <- position.w

#line 11
mov r0.y, l(16)
iadd r0.y, r0.y, r0.x
ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r0.yzw, r0.y, u0.xxyz
mov r0.yzw, r0.yyzw  // r0.y <- velocity.x; r0.z <- velocity.y; r0.w <- velocity.z

#line 12
mov r2.x, l(28)
iadd r2.x, r0.x, r2.x
ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r2.xyzw, r2.x, u0.xyzw  // r2.x <- color.x; r2.y <- color.y; r2.z <- color.z; r2.w <- color.w

#line 13
add r3.xyz, r0.yzwy, r1.xyzx  // r3.x <- position.x; r3.y <- position.y; r3.z <- position.z

#line 25
itof r3.w, l(10)
ge r3.w, r3.w, r3.x
movc r3.w, r3.w, l(1.000000), l(0)
itof r4.x, l(-10)
ge r4.x, r3.x, r4.x
movc r4.x, r4.x, l(1.000000), l(0)
mul r3.w, r3.w, r4.x
mov r3.w, -r3.w
add r3.w, r3.w, l(1.000000)  // r3.w <- regionFlag.x

#line 26
itof r4.x, l(10)
ge r4.x, r4.x, r3.y
movc r4.x, r4.x, l(1.000000), l(0)
itof r4.y, l(-10)
ge r4.y, r3.y, r4.y
movc r4.y, r4.y, l(1.000000), l(0)
mul r4.x, r4.y, r4.x
mov r4.x, -r4.x
add r4.x, r4.x, l(1.000000)  // r4.x <- regionFlag.y

#line 27
itof r4.y, l(10)
ge r4.y, r4.y, r3.z
movc r4.y, r4.y, l(1.000000), l(0)
itof r4.z, l(-10)
ge r4.z, r3.z, r4.z
movc r4.z, r4.z, l(1.000000), l(0)
mul r4.y, r4.z, r4.y
mov r4.y, -r4.y
add r4.y, r4.y, l(1.000000)  // r4.y <- regionFlag.z

#line 31
itof r4.z, l(0)
mov r4.w, -r3.x
add r4.z, r4.w, r4.z
mul r3.w, r3.w, r4.z
add r1.x, r3.w, r3.x  // r1.x <- position.x

#line 32
itof r3.x, l(0)
mov r3.w, -r3.y
add r3.x, r3.w, r3.x
mul r3.x, r3.x, r4.x
add r1.y, r3.x, r3.y  // r1.y <- position.y

#line 33
itof r3.x, l(0)
mov r3.y, -r3.z
add r3.x, r3.y, r3.x
mul r3.x, r3.x, r4.y
add r1.z, r3.x, r3.z  // r1.z <- position.z

#line 34
mov r3.x, l(0)
iadd r3.x, r0.x, r3.x
store_raw u0.xyzw, r3.x, r1.xyzw

#line 35
mov r1.x, l(16)
iadd r1.x, r0.x, r1.x
store_raw u0.xyz, r1.x, r0.yzwy

#line 36
mov r0.y, l(28)
iadd r0.x, r0.y, r0.x
store_raw u0.xyzw, r0.x, r2.xyzw

#line 37
ret 
// Approximately 74 instruction slots used
