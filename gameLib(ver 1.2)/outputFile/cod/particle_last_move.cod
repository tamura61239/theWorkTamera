//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CbScene
// {
//
//   float elapsdTime;                  // Offset:    0 Size:     4
//
// }
//
// Resource bind info for particleBuffer
// {
//
//   struct ParticleData
//   {
//       
//       float3 position;               // Offset:    0
//       float3 scale;                  // Offset:   12
//       float3 angle;                  // Offset:   24
//       float3 velocity;               // Offset:   36
//       float4 color;                  // Offset:   48
//       float3 accel;                  // Offset:   64
//       float life;                    // Offset:   76
//       float timer;                   // Offset:   80
//
//   } $Element;                        // Offset:    0 Size:    84
//
// }
//
// Resource bind info for deathIndexBuffer
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// particleBuffer                        UAV  struct         r/w             u0      1 
// indexBuffer                           UAV    byte         r/w             u1      1 
// newIndexBuffer                        UAV    byte         r/w             u2      1 
// deathIndexBuffer                      UAV  struct         r/w             u3      1 
// renderBuffer                          UAV    byte         r/w             u4      1 
// countBuffer                           UAV    byte         r/w             u5      1 
// CbScene                           cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB0[1], immediateIndexed
dcl_uav_structured u0, 84
dcl_uav_raw u1
dcl_uav_raw u2
dcl_uav_structured u3, 4
dcl_uav_raw u4
dcl_uav_raw u5
dcl_input vThreadID.x
dcl_temps 7
dcl_thread_group 100, 1, 1
//
// Initial variable locations:
//   vThreadID.x <- DTid.x; vThreadID.y <- DTid.y; vThreadID.z <- DTid.z
//
#line 26 "D:\就職作品\01\gameLib(ver 1.2)\Source\Shader\particle_data.hlsli"
mov r0.x, l(52)  // r0.x <- maxRenderDataSize

#line 7 "D:\就職作品\01\gameLib(ver 1.2)\Source\Shader\particle_last_move.hlsl"
ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r0.y, l(0), u5.xxxx
mov r0.y, r0.y  // r0.y <- particleCount

#line 8
ult r0.y, vThreadID.x, r0.y
if_nz r0.y

#line 10
  mov r0.y, l(4)
  imul null, r0.y, r0.y, vThreadID.x
  ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r0.y, r0.y, u1.xxxx  // r0.y <- particleIndex

#line 11
  ld_structured_indexable(structured_buffer, stride=84)(mixed,mixed,mixed,mixed) r1.x, r0.y, l(0), u0.xxxx  // r1.x <- particle.position.x
  ld_structured_indexable(structured_buffer, stride=84)(mixed,mixed,mixed,mixed) r1.y, r0.y, l(4), u0.xxxx  // r1.y <- particle.position.y
  ld_structured_indexable(structured_buffer, stride=84)(mixed,mixed,mixed,mixed) r1.z, r0.y, l(8), u0.xxxx  // r1.z <- particle.position.z
  ld_structured_indexable(structured_buffer, stride=84)(mixed,mixed,mixed,mixed) r2.x, r0.y, l(12), u0.xxxx  // r2.x <- particle.scale.x
  ld_structured_indexable(structured_buffer, stride=84)(mixed,mixed,mixed,mixed) r2.y, r0.y, l(16), u0.xxxx  // r2.y <- particle.scale.y
  ld_structured_indexable(structured_buffer, stride=84)(mixed,mixed,mixed,mixed) r2.z, r0.y, l(20), u0.xxxx  // r2.z <- particle.scale.z
  ld_structured_indexable(structured_buffer, stride=84)(mixed,mixed,mixed,mixed) r0.z, r0.y, l(24), u0.xxxx  // r0.z <- particle.angle.x
  ld_structured_indexable(structured_buffer, stride=84)(mixed,mixed,mixed,mixed) r3.y, r0.y, l(28), u0.xxxx  // r3.y <- particle.angle.y
  ld_structured_indexable(structured_buffer, stride=84)(mixed,mixed,mixed,mixed) r3.z, r0.y, l(32), u0.xxxx  // r3.z <- particle.angle.z
  ld_structured_indexable(structured_buffer, stride=84)(mixed,mixed,mixed,mixed) r3.x, r0.y, l(36), u0.xxxx  // r3.x <- particle.velocity.x
  ld_structured_indexable(structured_buffer, stride=84)(mixed,mixed,mixed,mixed) r3.w, r0.y, l(40), u0.xxxx  // r3.w <- particle.velocity.y
  ld_structured_indexable(structured_buffer, stride=84)(mixed,mixed,mixed,mixed) r4.z, r0.y, l(44), u0.xxxx  // r4.z <- particle.velocity.z
  ld_structured_indexable(structured_buffer, stride=84)(mixed,mixed,mixed,mixed) r0.w, r0.y, l(48), u0.xxxx  // r0.w <- particle.color.x
  ld_structured_indexable(structured_buffer, stride=84)(mixed,mixed,mixed,mixed) r1.w, r0.y, l(52), u0.xxxx  // r1.w <- particle.color.y
  ld_structured_indexable(structured_buffer, stride=84)(mixed,mixed,mixed,mixed) r2.w, r0.y, l(56), u0.xxxx  // r2.w <- particle.color.z
  ld_structured_indexable(structured_buffer, stride=84)(mixed,mixed,mixed,mixed) r4.w, r0.y, l(60), u0.xxxx  // r4.w <- particle.color.w
  ld_structured_indexable(structured_buffer, stride=84)(mixed,mixed,mixed,mixed) r5.x, r0.y, l(64), u0.xxxx  // r5.x <- particle.accel.x
  ld_structured_indexable(structured_buffer, stride=84)(mixed,mixed,mixed,mixed) r5.y, r0.y, l(68), u0.xxxx  // r5.y <- particle.accel.y
  ld_structured_indexable(structured_buffer, stride=84)(mixed,mixed,mixed,mixed) r5.z, r0.y, l(72), u0.xxxx  // r5.z <- particle.accel.z
  ld_structured_indexable(structured_buffer, stride=84)(mixed,mixed,mixed,mixed) r5.w, r0.y, l(76), u0.xxxx  // r5.w <- particle.life
  ld_structured_indexable(structured_buffer, stride=84)(mixed,mixed,mixed,mixed) r6.x, r0.y, l(80), u0.xxxx  // r6.x <- particle.timer

#line 12
  lt r6.y, r5.w, r6.x
  if_nz r6.y

#line 15
    mov r4.xy, r3.xwxx
    mul r6.yzw, r4.xxyz, cb0[0].xxxx
    add r1.xyz, r1.xyzx, r6.yzwy

#line 16
    add r6.x, r6.x, cb0[0].x

#line 17
    store_structured u0.x, r0.y, l(0), r1.x
    store_structured u0.x, r0.y, l(4), r1.y
    store_structured u0.x, r0.y, l(8), r1.z
    store_structured u0.x, r0.y, l(12), r2.x
    store_structured u0.x, r0.y, l(16), r2.y
    store_structured u0.x, r0.y, l(20), r2.z
    store_structured u0.x, r0.y, l(24), r0.z
    store_structured u0.x, r0.y, l(28), r3.y
    store_structured u0.x, r0.y, l(32), r3.z
    store_structured u0.x, r0.y, l(36), r3.x
    store_structured u0.x, r0.y, l(40), r3.w
    store_structured u0.x, r0.y, l(44), r4.z
    store_structured u0.x, r0.y, l(48), r0.w
    store_structured u0.x, r0.y, l(52), r1.w
    store_structured u0.x, r0.y, l(56), r2.w
    store_structured u0.x, r0.y, l(60), r4.w
    store_structured u0.x, r0.y, l(64), r5.x
    store_structured u0.x, r0.y, l(68), r5.y
    store_structured u0.x, r0.y, l(72), r5.z
    store_structured u0.x, r0.y, l(76), r5.w
    store_structured u0.x, r0.y, l(80), r6.x

#line 19
    mov r3.w, l(0)  // r3.w <- render.color

#line 20
    mov r1.xyz, r1.xyzx  // r1.x <- render.position.x; r1.y <- render.position.y; r1.z <- render.position.z

#line 21
    mov r3.x, r0.z  // r3.x <- render.angle.x
    mov r3.yz, r3.yyzy  // r3.y <- render.angle.y; r3.z <- render.angle.z

#line 22
    mov r2.xyz, r2.xyzx  // r2.x <- render.scale.x; r2.y <- render.scale.y; r2.z <- render.scale.z

#line 23
    mov r4.xyz, r4.xyzx  // r4.x <- render.velocity.x; r4.y <- render.velocity.y; r4.z <- render.velocity.z

#line 24
    itof r0.z, l(255)
    mul r0.z, r0.z, r0.w
    ftou r0.z, r0.z
    and r0.z, r0.z, l(0x00ffffff)
    mov r0.w, l(24)
    ishl r0.z, r0.z, r0.w
    iadd r0.z, r0.z, r3.w  // r0.z <- render.color

#line 25
    itof r0.w, l(255)
    mul r0.w, r0.w, r1.w
    ftou r0.w, r0.w
    and r0.w, r0.w, l(0x00ffffff)
    mov r1.w, l(16)
    ishl r0.w, r0.w, r1.w
    or r0.z, r0.w, r0.z

#line 26
    itof r0.w, l(255)
    mul r0.w, r0.w, r2.w
    ftou r0.w, r0.w
    and r0.w, r0.w, l(0x00ffffff)
    mov r1.w, l(8)
    ishl r0.w, r0.w, r1.w
    or r0.z, r0.w, r0.z

#line 27
    itof r0.w, l(255)
    mul r0.w, r0.w, r4.w
    ftou r0.w, r0.w
    and r0.w, r0.w, l(0x00ffffff)
    or r0.z, r0.w, r0.z

#line 28
    nop 
    mov r1.xyz, r1.xyzx
    mov r2.xyz, r2.xyzx
    mov r3.xyz, r3.xyzx
    mov r4.xyz, r4.xyzx
    mov r0.z, r0.z
    imul null, r0.x, r0.y, r0.x

#line 34 "D:\就職作品\01\gameLib(ver 1.2)\Source\Shader\particle_data.hlsli"
    store_raw u4.xyz, r0.x, r1.xyzx

#line 35
    mov r0.w, l(12)
    iadd r0.x, r0.w, r0.x

#line 36
    store_raw u4.xyz, r0.x, r2.xyzx

#line 37
    mov r0.w, l(12)
    iadd r0.x, r0.w, r0.x

#line 38
    store_raw u4.xyz, r0.x, r3.xyzx

#line 39
    mov r0.w, l(12)
    iadd r0.x, r0.w, r0.x

#line 40
    store_raw u4.xyz, r0.x, r4.xyzx

#line 41
    mov r0.w, l(12)
    iadd r0.x, r0.w, r0.x

#line 42
    store_raw u4.x, r0.x, r0.z

#line 32 "D:\就職作品\01\gameLib(ver 1.2)\Source\Shader\particle_last_move.hlsl"
    imm_atomic_iadd r1.x, u5, l(4), l(1)  // r1.x <- newAliveCount

#line 34
    mov r0.x, l(4)
    imul null, r0.x, r0.x, r1.x
    store_raw u2.x, r0.x, r0.y

#line 35
  else   // Prior locations: r1.x <- particle.position.x; r0.z <- particle.angle.x; r3.x <- particle.velocity.x; r3.w <- particle.velocity.y; r0.w <- particle.color.x; r1.w <- particle.color.y; r0.x <- maxRenderDataSize

#line 40
    imm_atomic_iadd r1.x, u5, l(8), l(1)  // r1.x <- deleteCount

#line 41
    store_structured u3.x, r1.x, l(0), r0.y

#line 43
  endif 

#line 44
endif 

#line 45
ret 
// Approximately 118 instruction slots used
