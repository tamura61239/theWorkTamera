//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CbScene
// {
//
//   row_major float4x4 view;           // Offset:    0 Size:    64
//   row_major float4x4 projection;     // Offset:   64 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// CbScene                           cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// ANGLE                    0   x           1     NONE   float       
// COLOR                    0   x           2     NONE    uint   x   
// VELOCITY                 0   xyz         3     NONE   float       
// SCALE                    0   x           4     NONE   float   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// POSITION                 0   xyz         1     NONE   float   xyz 
// SCALE                    0   xyz         2     NONE   float   xyz 
// ROTATE                   0   xyz         3     NONE   float   xyz 
// ROTATE                   1   xyz         4     NONE   float   xyz 
// ROTATE                   2   xyz         5     NONE   float   xyz 
// COLOR                    0   xyzw        6     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB0[8], immediateIndexed
dcl_input v0.xyz
dcl_input v2.x
dcl_input v4.x
dcl_output_siv o0.xyzw, position
dcl_output o1.xyz
dcl_output o2.xyz
dcl_output o3.xyz
dcl_output o4.xyz
dcl_output o5.xyz
dcl_output o6.xyzw
dcl_temps 7
//
// Initial variable locations:
//   v0.x <- position.x; v0.y <- position.y; v0.z <- position.z; v0.w <- position.w; 
//   v1.x <- angle; 
//   v2.x <- color; 
//   v3.x <- velocity.x; v3.y <- velocity.y; v3.z <- velocity.z; 
//   v4.x <- scale; 
//   o6.x <- <main return value>.color.x; o6.y <- <main return value>.color.y; o6.z <- <main return value>.color.z; o6.w <- <main return value>.color.w; 
//   o5.x <- <main return value>.rotateMatrix._m02; o5.y <- <main return value>.rotateMatrix._m12; o5.z <- <main return value>.rotateMatrix._m22; 
//   o4.x <- <main return value>.rotateMatrix._m01; o4.y <- <main return value>.rotateMatrix._m11; o4.z <- <main return value>.rotateMatrix._m21; 
//   o3.x <- <main return value>.rotateMatrix._m00; o3.y <- <main return value>.rotateMatrix._m10; o3.z <- <main return value>.rotateMatrix._m20; 
//   o2.x <- <main return value>.scale.x; o2.y <- <main return value>.scale.y; o2.z <- <main return value>.scale.z; 
//   o1.x <- <main return value>.worldPosition.x; o1.y <- <main return value>.worldPosition.y; o1.z <- <main return value>.worldPosition.z; 
//   o0.x <- <main return value>.position.x; o0.y <- <main return value>.position.y; o0.z <- <main return value>.position.z; o0.w <- <main return value>.position.w
//
#line 5 "D:\就職作品\01\gameLib(ver 1.2)\Source\Shader\particle_render2.hlsl"
itof r0.xyz, l(0, 0, 0, 0)  // r0.x <- vout.rotateMatrix._m00; r0.y <- vout.rotateMatrix._m10; r0.z <- vout.rotateMatrix._m20
itof r1.xyz, l(0, 0, 0, 0)  // r1.x <- vout.rotateMatrix._m01; r1.y <- vout.rotateMatrix._m11; r1.z <- vout.rotateMatrix._m21
itof r2.xyz, l(0, 0, 0, 0)  // r2.x <- vout.rotateMatrix._m02; r2.y <- vout.rotateMatrix._m12; r2.z <- vout.rotateMatrix._m22

#line 6
mov r3.xyz, v0.xyzx  // r3.x <- vout.worldPosition.x; r3.y <- vout.worldPosition.y; r3.z <- vout.worldPosition.z

#line 7
itof r0.w, l(1)
mul r4.xyzw, v0.xxxx, cb0[0].xyzw
mul r5.xyzw, v0.yyyy, cb0[1].xyzw
add r4.xyzw, r4.xyzw, r5.xyzw
mul r5.xyzw, v0.zzzz, cb0[2].xyzw
add r4.xyzw, r4.xyzw, r5.xyzw
mul r5.xyzw, r0.wwww, cb0[3].xyzw
add r4.xyzw, r4.xyzw, r5.xyzw  // r4.x <- vout.position.x; r4.y <- vout.position.y; r4.z <- vout.position.z; r4.w <- vout.position.w

#line 8
mul r5.xyzw, r4.xxxx, cb0[4].xyzw
mul r6.xyzw, r4.yyyy, cb0[5].xyzw
add r5.xyzw, r5.xyzw, r6.xyzw
mul r6.xyzw, r4.zzzz, cb0[6].xyzw
add r5.xyzw, r5.xyzw, r6.xyzw
mul r4.xyzw, r4.wwww, cb0[7].xyzw
add r4.xyzw, r4.xyzw, r5.xyzw  // r4.x <- vout.position.x; r4.y <- vout.position.y; r4.z <- vout.position.z; r4.w <- vout.position.w

#line 9
mov r5.xyz, v4.xxxx  // r5.x <- vout.scale.x; r5.y <- vout.scale.y; r5.z <- vout.scale.z

#line 10
mov r0.w, l(24)
ushr r0.w, v2.x, r0.w
and r0.w, r0.w, l(255)
utof r0.w, r0.w
div r0.w, r0.w, l(255.000000)  // r0.w <- vout.color.x

#line 11
mov r1.w, l(16)
ushr r1.w, v2.x, r1.w
and r1.w, r1.w, l(255)
utof r1.w, r1.w
div r1.w, r1.w, l(255.000000)  // r1.w <- vout.color.y

#line 12
mov r2.w, l(8)
ushr r2.w, v2.x, r2.w
and r2.w, r2.w, l(255)
utof r2.w, r2.w
div r2.w, r2.w, l(255.000000)  // r2.w <- vout.color.z

#line 13
mov r3.w, v2.x
and r3.w, r3.w, l(255)
utof r3.w, r3.w
div r3.w, r3.w, l(255.000000)  // r3.w <- vout.color.w

#line 14
mov o0.xyzw, r4.xyzw
mov o6.x, r0.w
mov o6.y, r1.w
mov o6.z, r2.w
mov o6.w, r3.w
mov o1.xyz, r3.xyzx
mov o2.xyz, r5.xyzx
mov o3.xyz, r0.xyzx
mov o4.xyz, r1.xyzx
mov o5.xyz, r2.xyzx
ret 
// Approximately 50 instruction slots used
